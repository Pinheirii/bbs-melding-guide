{"version":3,"sources":["CharacterCheckbox.js","SearchMask.js","SearchresultTable.js","MeldingGuide.js","reportWebVitals.js","index.js"],"names":["CharacterCheckbox","props","name","character","onCheckboxChange","bind","event","this","target","checked","type","isChecked","onChange","Component","SearchMask","meldingRules","MeldingRules","recipes","typemappings","Typemappings","characters","Characters","state","neededCrystal","onChangeCheckbox","onChangeCommand","onChangeAbility","className","value","selectedCommand","item","map","rule","command","filter","index","self","indexOf","selectedAbility","typemapping","outcome","char","checkboxMap","get","chosenOutcome","crystalname","length","setState","crystal","SelectItem","SearchresultTable","searchresults","searchresult","recipe","identifier","RecipeTableRow","ingredient1","ingredient2","usedBy","percentage","MeldingGuide","Map","forEach","set","filterSearchresults","onChangeSelectedCommand","onChangeSelectedAbility","relevantTypes","typemap","result","includes","filterByCharacter","charAt","newCheckboxMap","ability","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c090b58.chunk.js","sourcesContent":["import { Component } from 'react';\r\n\r\nclass CharacterCheckbox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = props.character.name;\r\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\r\n    }\r\n    onCheckboxChange(event) {\r\n        this.props.onCheckboxChange(event.target.name, event.target.checked)\r\n    }\r\n    render() {\r\n        const name = this.props.character.name;\r\n        return (\r\n            <label><input type=\"checkbox\" checked={this.props.isChecked} onChange={this.onCheckboxChange} name={name} />{name}</label>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterCheckbox;\r\n","import { Component } from \"react\";\r\nimport CharacterCheckbox from './CharacterCheckbox';\r\nimport Characters from './data/characters.json';\r\nimport MeldingRules from \"./data/meldingrules.json\";\r\nimport Typemappings from \"./data/typemappings.json\";\r\n\r\nclass SearchMask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.meldingRules = MeldingRules.recipes;\r\n        this.typemappings = Typemappings.typemappings;\r\n        this.characters = Characters.characters;\r\n        this.state = {\r\n            neededCrystal: ''\r\n        };\r\n\r\n        this.onChangeCheckbox = this.onChangeCheckbox.bind(this);\r\n        this.onChangeCommand = this.onChangeCommand.bind(this);\r\n        this.onChangeAbility = this.onChangeAbility.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"CommandDropdown\">\r\n                    <p>Commands</p>\r\n                    <select value={this.props.selectedCommand} onChange={this.onChangeCommand}>\r\n                        <SelectItem item={''} />\r\n                        {this.meldingRules.map(rule => rule.command).filter((value, index, self) => self.indexOf(value) === index).map(command => {\r\n                            return <SelectItem item={command} key={command} />\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"AbilityDropdown\">\r\n                    <p>Abilities</p>\r\n                    <select value={this.props.selectedAbility} onChange={this.onChangeAbility}>\r\n                        <SelectItem item={''} />\r\n                        {this.typemappings.map(typemapping => typemapping.outcome).filter((value, index, self) => self.indexOf(value) === index).map(type => {\r\n                            return <SelectItem item={type} key={type} />\r\n                        })}\r\n                    </select>\r\n                    <p>Crystal: {this.state.neededCrystal}</p>\r\n                </div>\r\n                <div className=\"Characterfilter\">\r\n                    {this.characters.map(char => {\r\n                        return <CharacterCheckbox character={char} key={char.name} isChecked={this.props.checkboxMap.get(char.name)} onCheckboxChange={this.onChangeCheckbox} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChangeCommand(event) {\r\n        this.props.onChangeCommand(event.target.value);\r\n    }\r\n\r\n    onChangeAbility(event) {\r\n        const chosenOutcome = event.target.value;\r\n        const crystalname = this.typemappings.filter(type => type.outcome === chosenOutcome);\r\n        if (typeof crystalname !== 'undefined' && crystalname.length > 0) {\r\n            this.setState({ neededCrystal: crystalname[0].crystal });\r\n        } else {\r\n            this.setState({ neededCrystal: ''})\r\n        }\r\n        this.props.onChangeAbility(chosenOutcome);\r\n    }\r\n\r\n    onChangeCheckbox(name, isChecked) {\r\n        this.props.onChangeCheckbox(name, isChecked);\r\n    }\r\n}\r\n\r\nclass SelectItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.item = props.item;\r\n    }\r\n    render() {\r\n        return (\r\n            <option value={this.item}>{this.item}</option>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchMask;\r\n","import { Component } from \"react\";\r\n\r\nclass SearchresultTable extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Melding Recipes</p>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Command</th>\r\n                        <th>First Ingredient</th>\r\n                        <th>Second Ingredient</th>\r\n                        <th>Type</th>\r\n                        <th>Used By</th>\r\n                        <th>%</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.props.searchresults.map((searchresult) => {\r\n                        return <RecipeTableRow recipe={searchresult} key={searchresult.identifier} />\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass RecipeTableRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            command: props.recipe.command,\r\n            ingredient1: props.recipe.ingredient1,\r\n            ingredient2: props.recipe.ingredient2,\r\n            type: props.recipe.type,\r\n            usedBy: props.recipe.usedBy,\r\n            percentage: props.recipe.percentage\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.state.command}</td>\r\n                <td>{this.state.ingredient1}</td>\r\n                <td>{this.state.ingredient2}</td>\r\n                <td>{this.state.type}</td>\r\n                <td>{this.state.usedBy}</td>\r\n                <td>{this.state.percentage}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchresultTable;\r\n","import { Component } from 'react';\r\nimport SearchMask from './SearchMask';\r\nimport SearchresultTable from './SearchresultTable';\r\nimport MeldingRules from \"./data/meldingrules.json\";\r\nimport Typemappings from \"./data/typemappings.json\";\r\nimport Characters from \"./data/characters.json\";\r\n\r\nclass MeldingGuide extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const checkboxMap = new Map();\r\n        Characters.characters.forEach(char => checkboxMap.set(char.name, false));\r\n        this.state = {\r\n            selectedCommand: '',\r\n            selectedAbility: '',\r\n            checkboxMap: checkboxMap\r\n        };\r\n        this.searchresults = MeldingRules.recipes;\r\n        this.typemappings = Typemappings.typemappings;\r\n        this.onChangeCheckbox = this.onChangeCheckbox.bind(this);\r\n        this.filterSearchresults = this.filterSearchresults.bind(this);\r\n        this.onChangeSelectedCommand = this.onChangeSelectedCommand.bind(this);\r\n        this.onChangeSelectedAbility = this.onChangeSelectedAbility.bind(this);\r\n    }\r\n\r\n    render() {\r\n        this.searchresults = MeldingRules.recipes;\r\n        this.filterSearchresults();\r\n        return (\r\n            <div className=\"App\">\r\n                <p>KH BBS Melding Guide</p>\r\n                <SearchMask checkboxMap={this.state.checkboxMap} selectedCommand={this.state.selectedCommand} selectedAbility={this.state.selectedAbility} onChangeCheckbox={this.onChangeCheckbox} onChangeCommand={this.onChangeSelectedCommand} onChangeAbility={this.onChangeSelectedAbility} />\r\n                <SearchresultTable searchresults={this.searchresults} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    filterSearchresults() {\r\n        if (this.state.selectedCommand !== '') {\r\n            this.searchresults = this.searchresults.filter(recipe => recipe.command === this.state.selectedCommand);\r\n        }\r\n        if (this.state.selectedAbility !== '') {\r\n            const relevantTypes = this.typemappings.filter(typemap => typemap.outcome === this.state.selectedAbility).map(typemap => typemap.type);\r\n            this.searchresults = this.searchresults.filter(result => relevantTypes.includes(result.type));\r\n        }\r\n        this.state.checkboxMap.forEach((isChecked, name) => this.filterByCharacter(isChecked, name));\r\n    }\r\n\r\n    filterByCharacter(isChecked, name) {\r\n        if (isChecked) {\r\n            this.searchresults = this.searchresults.filter(result => result.usedBy.includes(name.charAt(0)));\r\n        }\r\n    }\r\n\r\n    onChangeCheckbox(name, isChecked) {\r\n        var newCheckboxMap = this.state.checkboxMap;\r\n        newCheckboxMap.set(name, isChecked);\r\n        this.setState({ checkboxMap: newCheckboxMap });\r\n    }\r\n\r\n    onChangeSelectedCommand(command) {\r\n        this.setState({ selectedCommand: command });\r\n    }\r\n\r\n    onChangeSelectedAbility(ability) {\r\n        this.setState({ selectedAbility: ability });\r\n    }\r\n}\r\n\r\nexport default MeldingGuide;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MeldingGuide from './MeldingGuide';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <MeldingGuide />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}